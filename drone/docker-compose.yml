version: "3.8"

services:
    drone-server:
        image: drone/drone:latest
        container_name: drone-server
        volumes:
            - ./data:/data
        environment:
            - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
            - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
            - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
            - DRONE_USER_CREATE=${DRONE_USER_CREATE}
            - DRONE_USER_FILTER=${DRONE_USER_FILTER}

            # Github
            - DRONE_GITHUB_SERVER=https://github.com

            # Github OAuth
            - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}
            - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}

            # debug
            - DRONE_LOGS_DEBUG=true
            - DRONE_LOGS_PRETTY=true
            - DRONE_LOGS_COLOR=true
        networks:
            - dev
        labels:
            - "traefik.http.routers.drone-server.rule=Host(`${DRONE_HOST}`)"
            - "traefik.http.services.drone-drone-server.loadbalancer.server.port=80"
            - "traefik.enable=true"
        restart: always
    
    drone-runner:
        image: drone/drone-runner-docker:latest
        container_name: drone-runner
        depends_on:
            - drone-server
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            - DRONE_RPC_HOST=${DRONE_RPC_HOST}
            - DRONE_RPC_PROTO=${DRONE_RPC_PROTO}
            - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
            - DRONE_RUNNER_CAPACITY=1
        networks:
            - dev
        labels:
            - "traefik.http.services.drone-drone-runner.loadbalancer.server.port=80"
        restart: always

networks:
    dev:
        external: true